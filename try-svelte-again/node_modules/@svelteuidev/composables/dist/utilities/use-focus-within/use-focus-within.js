import { writable } from 'svelte/store';
function containsRelatedTarget(event) {
    if (event.currentTarget instanceof HTMLElement && event.relatedTarget instanceof HTMLElement) {
        return event.currentTarget.contains(event.relatedTarget);
    }
    return false;
}
export function useFocusWithin({ onBlur, onFocus } = {}) {
    const focused = writable(false);
    let focusedRef = false;
    const setFocused = (value) => {
        focused.set(value);
        focusedRef = value;
    };
    const handleFocusIn = (event) => {
        if (!focusedRef) {
            setFocused(true);
            onFocus?.(event);
        }
    };
    const handleFocusOut = (event) => {
        if (focusedRef && !containsRelatedTarget(event)) {
            setFocused(false);
            onBlur?.(event);
        }
    };
    const focuswithin = (node) => {
        node?.addEventListener('focusin', handleFocusIn);
        node?.addEventListener('focusout', handleFocusOut);
        return {
            destroy: () => {
                node?.removeEventListener('focusin', handleFocusIn);
                node?.removeEventListener('focusout', handleFocusOut);
            }
        };
    };
    return [focused, focuswithin];
}
