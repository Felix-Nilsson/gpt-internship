import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        class?: string;
        color?: import("../..").SvelteUIColor;
        block?: boolean;
        width?: number;
        copy?: boolean;
        message?: string;
        noMono?: boolean;
        className?: string;
        override?: import("../..").CSS;
        element?: HTMLElement | HTMLPreElement;
        use?: import("../../internal/utils/forwarding/forward-actions").ActionArray;
        m?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        my?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        mx?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        mt?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        mb?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        ml?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        mr?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        p?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        py?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        px?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        pt?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        pb?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        pl?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        pr?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        accesskey?: string;
        autofocus?: boolean;
        contenteditable?: "inherit" | import("svelte/elements").Booleanish;
        contextmenu?: string;
        dir?: string;
        draggable?: import("svelte/elements").Booleanish;
        enterkeyhint?: "search" | "enter" | "done" | "go" | "next" | "previous" | "send";
        hidden?: boolean;
        id?: string;
        lang?: string;
        part?: string;
        placeholder?: string;
        slot?: string;
        spellcheck?: import("svelte/elements").Booleanish;
        style?: string;
        tabindex?: number;
        title?: string;
        translate?: "" | "yes" | "no";
        inert?: boolean;
        radiogroup?: string;
        role?: import("svelte/elements").AriaRole;
        about?: string;
        datatype?: string;
        inlist?: any;
        prefix?: string;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autocapitalize?: string;
        autocorrect?: string;
        autosave?: string;
        itemprop?: string;
        itemscope?: boolean;
        itemtype?: string;
        itemid?: string;
        itemref?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        inputmode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
        is?: string;
        'bind:innerHTML'?: string;
        'bind:textContent'?: string;
        'bind:innerText'?: string;
        'bind:contentRect'?: DOMRectReadOnly;
        'bind:contentBoxSize'?: {
            blockSize: number;
            inlineSize: number;
        }[];
        'bind:borderBoxSize'?: {
            blockSize: number;
            inlineSize: number;
        }[];
        'bind:devicePixelContentBoxSize'?: {
            blockSize: number;
            inlineSize: number;
        }[];
        'data-sveltekit-keepfocus'?: true | "" | "off";
        'data-sveltekit-noscroll'?: true | "" | "off";
        'data-sveltekit-preload-code'?: true | "" | "off" | "eager" | "viewport" | "hover" | "tap";
        'data-sveltekit-preload-data'?: true | "" | "off" | "hover" | "tap";
        'data-sveltekit-reload'?: true | "" | "off";
        'data-sveltekit-replacestate'?: true | "" | "off";
        'aria-activedescendant'?: string;
        'aria-atomic'?: import("svelte/elements").Booleanish;
        'aria-autocomplete'?: "none" | "inline" | "both" | "list";
        'aria-busy'?: import("svelte/elements").Booleanish;
        'aria-checked'?: boolean | "mixed" | "true" | "false";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-controls'?: string;
        'aria-current'?: "time" | "page" | import("svelte/elements").Booleanish | "step" | "location" | "date";
        'aria-describedby'?: string;
        'aria-details'?: string;
        'aria-disabled'?: import("svelte/elements").Booleanish;
        'aria-dropeffect'?: "copy" | "link" | "none" | "move" | "execute" | "popup";
        'aria-errormessage'?: string;
        'aria-expanded'?: import("svelte/elements").Booleanish;
        'aria-flowto'?: string;
        'aria-grabbed'?: import("svelte/elements").Booleanish;
        'aria-haspopup'?: "dialog" | "menu" | "grid" | "listbox" | import("svelte/elements").Booleanish | "tree";
        'aria-hidden'?: import("svelte/elements").Booleanish;
        'aria-invalid'?: import("svelte/elements").Booleanish | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: import("svelte/elements").Booleanish;
        'aria-multiline'?: import("svelte/elements").Booleanish;
        'aria-multiselectable'?: import("svelte/elements").Booleanish;
        'aria-orientation'?: "horizontal" | "vertical";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "mixed" | "true" | "false";
        'aria-readonly'?: import("svelte/elements").Booleanish;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
        'aria-required'?: import("svelte/elements").Booleanish;
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: import("svelte/elements").Booleanish;
        'aria-setsize'?: number;
        'aria-sort'?: "none" | "ascending" | "descending" | "other";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement | HTMLPreElement>;
        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement | HTMLPreElement>;
        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement | HTMLPreElement>;
        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement | HTMLPreElement>;
        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement | HTMLPreElement>;
        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement | HTMLPreElement>;
        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement | HTMLPreElement>;
        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement | HTMLPreElement>;
        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement | HTMLPreElement>;
        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement | HTMLPreElement>;
        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement | HTMLPreElement>;
        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement | HTMLPreElement>;
        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement | HTMLPreElement>;
        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement | HTMLPreElement>;
        'on:submit'?: import("svelte/elements").EventHandler<Event & {
            readonly submitter: HTMLElement;
        }, HTMLElement | HTMLPreElement>;
        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
            readonly formData: FormData;
        }, HTMLElement | HTMLPreElement>;
        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement | HTMLPreElement>;
        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement | HTMLPreElement>;
        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement | HTMLPreElement>;
        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement | HTMLPreElement>;
        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement | HTMLPreElement>;
        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement | HTMLPreElement>;
        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement | HTMLPreElement>;
        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement | HTMLPreElement>;
        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement | HTMLPreElement>;
        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement | HTMLPreElement>;
        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement | HTMLPreElement>;
        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement | HTMLPreElement>;
        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement | HTMLPreElement>;
        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement | HTMLPreElement>;
        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement | HTMLPreElement>;
        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement | HTMLPreElement>;
        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement | HTMLPreElement>;
        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement | HTMLPreElement>;
        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement | HTMLPreElement>;
        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement | HTMLPreElement>;
        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement | HTMLPreElement>;
        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement | HTMLPreElement>;
        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement | HTMLPreElement>;
        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export type CodeProps = typeof __propDef.props;
export type CodeEvents = typeof __propDef.events;
export type CodeSlots = typeof __propDef.slots;
/**
 * Inline or block code without syntax highlighting
 *
 * @see https://svelteui.org/core/code
 * @example
 * ```tsx
 * <Code color='green' size='lg' variant='bars' /> // standard code component
 * <Code color='blue' block copy message={codeToCopy} /> // code with block and copy props
 * ```
 */
export default class Code extends SvelteComponentTyped<CodeProps, CodeEvents, CodeSlots> {
}
export {};
