import type { Writable } from '../../shared/utilities/types';
export interface EyeDropperOpenOptions {
    signal?: AbortSignal;
}
export interface EyeDropper {
    new (): EyeDropper;
    open: (options?: EyeDropperOpenOptions) => Promise<{
        sRGBHex: string;
    }>;
    [Symbol.toStringTag]: 'EyeDropper';
}
export interface EyeDropperOptions {
    initialValue?: string;
}
export interface EyeDropperReturn {
    isSupported: boolean;
    sRGBHex: Writable<string>;
    open: (openOptions?: EyeDropperOpenOptions) => Promise<{
        sRGBHex: string;
    }>;
}
/**
 * A reactive [EyeDropper API](https://developer.mozilla.org/en-US/docs/Web/API/EyeDropper_API)
 *
 * @param options - an object containing the initial value of the sRGBHex value
 * @returns
 */
export declare function useEyeDropper(options?: EyeDropperOptions): EyeDropperReturn;
