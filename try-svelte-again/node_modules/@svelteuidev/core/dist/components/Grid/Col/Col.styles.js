import { createStyles } from '../../../styles';
const SIZES = ['xs', 'sm', 'md', 'lg', 'xl'];
const columnWidth = (span, columns) => `${100 / (columns / span)}%`;
const columnOffset = (offset, columns) => offset ? `${100 / (columns / offset)}%` : undefined;
const breakpointsStyles = (sizes, offsets, theme, columns, grow) => {
    return SIZES.reduce((acc, size) => {
        if (typeof sizes[size] === 'number') {
            acc[`@media (min-width: ${parseInt(theme.breakpoints[size].value) + 1}px)`] = {
                flexBasis: columnWidth(sizes[size], columns),
                flexShrink: 0,
                maxWidth: grow ? 'unset' : columnWidth(sizes[size], columns),
                marginLeft: columnOffset(offsets[size], columns),
                padding: theme.fn.size({ size: size, sizes: theme.space }) / 2
            };
        }
        return acc;
    }, {});
};
export default createStyles((theme, { cols, grow, spacing, span, offset, offsetXs, offsetSm, offsetMd, offsetLg, offsetXl, xs, sm, md, lg, xl }) => {
    return {
        root: {
            boxSizing: 'border-box',
            flexGrow: grow ? 1 : 0,
            padding: theme.fn.size({ size: spacing, sizes: theme.space }) / 2,
            marginLeft: columnWidth(offset, cols),
            flexBasis: columnWidth(span, cols),
            flexShrink: 0,
            maxWidth: grow ? 'unset' : columnWidth(span, cols),
            ...breakpointsStyles({ xs, sm, md, lg, xl }, {
                xs: offsetXs,
                sm: offsetSm,
                md: offsetMd,
                lg: offsetLg,
                xl: offsetXl
            }, theme, cols, grow)
        }
    };
});
