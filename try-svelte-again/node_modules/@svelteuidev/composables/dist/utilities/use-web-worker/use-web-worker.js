import { defaultWindow } from '../../shared/index.js';
import createWorkerBlobUrl from './lib/createWorkerBlobUrl.js';
/**
 * Run expensive function without blocking the UI, using a simple syntax that makes use of Promise.
 *
 * @see https://svelteui.org/composables/use-web-worker
 * @param fn
 * @param options
 */
export const useWebWorker = (fn, options = {}) => {
    const { dependencies = [], timeout, window = defaultWindow } = options;
    let timeoutId, worker;
    let workerStatus = 'PENDING';
    let promise = {};
    const workerTerminate = (status = 'PENDING') => {
        if (worker && worker._url && window) {
            worker.terminate();
            URL.revokeObjectURL(worker._url);
            promise = {};
            worker = undefined;
            window.clearTimeout(timeoutId);
            workerStatus = status;
        }
    };
    workerTerminate();
    const generateWorker = () => {
        const blobUrl = createWorkerBlobUrl(fn, dependencies);
        const newWorker = new Worker(blobUrl);
        newWorker._url = blobUrl;
        newWorker.onmessage = (e) => {
            const { resolve = () => { }, reject = () => { } } = promise;
            const [status, result] = e.data;
            switch (status) {
                case 'SUCCESS':
                    resolve(result);
                    workerTerminate(status);
                    break;
                default:
                    reject(result);
                    workerTerminate('ERROR');
                    break;
            }
        };
        newWorker.onerror = (e) => {
            const { reject = () => { } } = promise;
            reject(e);
            workerTerminate('ERROR');
        };
        if (timeout) {
            timeoutId = setTimeout(() => workerTerminate('TIMEOUT_EXPIRED'), timeout);
        }
        return newWorker;
    };
    const callWorker = (...fnArgs) => new Promise((resolve, reject) => {
        promise = {
            resolve,
            reject
        };
        worker && worker.postMessage([[...fnArgs]]);
        workerStatus = 'RUNNING';
    });
    const workerFn = (...fnArgs) => {
        if (workerStatus === 'RUNNING') {
            /* eslint-disable-next-line no-console */
            console.error('[useWebWorker] You can only run one instance of the worker at a time.');
            /* eslint-disable-next-line prefer-promise-reject-errors */
            return Promise.reject();
        }
        worker = generateWorker();
        return callWorker(...fnArgs);
    };
    return {
        workerFn,
        workerStatus,
        workerTerminate
    };
};
