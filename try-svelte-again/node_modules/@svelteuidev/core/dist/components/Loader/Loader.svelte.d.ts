import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        class?: string;
        size?: import("../..").SvelteUINumberSize;
        color?: "white" | import("../..").SvelteUIColor;
        variant?: import("../..").LoaderType;
        className?: string;
        override?: import("../..").CSS;
        element?: Omit<typeof import("svelte").SvelteComponent, "prototype">;
        use?: import("../../internal/utils/forwarding/forward-actions").ActionArray;
        m?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        my?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        mx?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        mt?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        mb?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        ml?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        mr?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        p?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        py?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        px?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        pt?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        pb?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        pl?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        pr?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        string?: string | number;
        style?: string;
        name?: string;
        scale?: string | number;
        max?: string | number;
        cursor?: string | number;
        direction?: string | number;
        display?: string | number;
        filter?: string;
        height?: string | number;
        opacity?: string | number;
        order?: string | number;
        rotate?: string | number;
        transform?: string;
        visibility?: string | number;
        width?: string | number;
        mask?: string;
        offset?: string | number;
        overflow?: string | number;
        clip?: string | number;
        fill?: string;
        stroke?: string;
        to?: string | number;
        d?: string;
        end?: string | number;
        local?: string | number;
        radius?: string | number;
        media?: string;
        cx?: string | number;
        values?: string;
        r?: string | number;
        k?: string | number;
        x?: string | number;
        y?: string | number;
        alphabetic?: string | number;
        hanging?: string | number;
        ideographic?: string | number;
        mathematical?: string | number;
        origin?: string | number;
        path?: string;
        id?: string;
        lang?: string;
        method?: string;
        min?: string | number;
        target?: string;
        type?: string;
        role?: import("svelte/elements").AriaRole;
        tabindex?: number;
        crossorigin?: "" | "anonymous" | "use-credentials";
        'accent-height'?: string | number;
        accumulate?: "none" | "sum";
        additive?: "replace" | "sum";
        'alignment-baseline'?: "auto" | "baseline" | "inherit" | "middle" | "after-edge" | "alphabetic" | "before-edge" | "central" | "hanging" | "ideographic" | "mathematical" | "text-after-edge" | "text-before-edge";
        allowReorder?: "yes" | "no";
        amplitude?: string | number;
        'arabic-form'?: "initial" | "medial" | "terminal" | "isolated";
        ascent?: string | number;
        attributeName?: string;
        attributeType?: string;
        autoReverse?: string | number;
        azimuth?: string | number;
        baseFrequency?: string | number;
        'baseline-shift'?: string | number;
        baseProfile?: string | number;
        bbox?: string | number;
        begin?: string | number;
        bias?: string | number;
        by?: string | number;
        calcMode?: string | number;
        'cap-height'?: string | number;
        'clip-path'?: string;
        clipPathUnits?: string | number;
        'clip-rule'?: string | number;
        'color-interpolation'?: string | number;
        'color-interpolation-filters'?: "auto" | "inherit" | "linearRGB" | "sRGB";
        'color-profile'?: string | number;
        'color-rendering'?: string | number;
        contentScriptType?: string | number;
        contentStyleType?: string | number;
        cy?: string | number;
        decelerate?: string | number;
        descent?: string | number;
        diffuseConstant?: string | number;
        divisor?: string | number;
        'dominant-baseline'?: string | number;
        dur?: string | number;
        dx?: string | number;
        dy?: string | number;
        edgeMode?: string | number;
        elevation?: string | number;
        'enable-background'?: string | number;
        exponent?: string | number;
        externalResourcesRequired?: string | number;
        'fill-opacity'?: string | number;
        'fill-rule'?: "inherit" | "evenodd" | "nonzero";
        filterRes?: string | number;
        filterUnits?: string | number;
        'flood-color'?: string | number;
        'flood-opacity'?: string | number;
        focusable?: string | number;
        'font-family'?: string;
        'font-size'?: string | number;
        'font-size-adjust'?: string | number;
        'font-stretch'?: string | number;
        'font-style'?: string | number;
        'font-variant'?: string | number;
        'font-weight'?: string | number;
        format?: string | number;
        from?: string | number;
        fx?: string | number;
        fy?: string | number;
        g1?: string | number;
        g2?: string | number;
        'glyph-name'?: string | number;
        'glyph-orientation-horizontal'?: string | number;
        'glyph-orientation-vertical'?: string | number;
        glyphRef?: string | number;
        gradientTransform?: string;
        gradientUnits?: string;
        href?: string;
        'horiz-adv-x'?: string | number;
        'horiz-origin-x'?: string | number;
        'image-rendering'?: string | number;
        in2?: string | number;
        in?: string;
        intercept?: string | number;
        k1?: string | number;
        k2?: string | number;
        k3?: string | number;
        k4?: string | number;
        kernelMatrix?: string | number;
        kernelUnitLength?: string | number;
        kerning?: string | number;
        keyPoints?: string | number;
        keySplines?: string | number;
        keyTimes?: string | number;
        lengthAdjust?: string | number;
        'letter-spacing'?: string | number;
        'lighting-color'?: string | number;
        limitingConeAngle?: string | number;
        'marker-end'?: string;
        markerHeight?: string | number;
        'marker-mid'?: string;
        'marker-start'?: string;
        markerUnits?: string | number;
        markerWidth?: string | number;
        maskContentUnits?: string | number;
        maskUnits?: string | number;
        mode?: string | number;
        numOctaves?: string | number;
        operator?: string | number;
        orient?: string | number;
        orientation?: string | number;
        'overline-position'?: string | number;
        'overline-thickness'?: string | number;
        'paint-order'?: string | number;
        'panose-1'?: string | number;
        pathLength?: string | number;
        patternContentUnits?: string;
        patternTransform?: string | number;
        patternUnits?: string;
        'pointer-events'?: string | number;
        points?: string;
        pointsAtX?: string | number;
        pointsAtY?: string | number;
        pointsAtZ?: string | number;
        preserveAlpha?: string | number;
        preserveAspectRatio?: string;
        primitiveUnits?: string | number;
        refX?: string | number;
        refY?: string | number;
        'rendering-intent'?: string | number;
        repeatCount?: string | number;
        repeatDur?: string | number;
        requiredExtensions?: string | number;
        requiredFeatures?: string | number;
        restart?: string | number;
        result?: string;
        rx?: string | number;
        ry?: string | number;
        seed?: string | number;
        'shape-rendering'?: string | number;
        slope?: string | number;
        spacing?: string | number;
        specularConstant?: string | number;
        specularExponent?: string | number;
        speed?: string | number;
        spreadMethod?: string;
        startOffset?: string | number;
        stdDeviation?: string | number;
        stemh?: string | number;
        stemv?: string | number;
        stitchTiles?: string | number;
        'stop-color'?: string;
        'stop-opacity'?: string | number;
        'strikethrough-position'?: string | number;
        'strikethrough-thickness'?: string | number;
        'stroke-dasharray'?: string | number;
        'stroke-dashoffset'?: string | number;
        'stroke-linecap'?: "round" | "inherit" | "butt" | "square";
        'stroke-linejoin'?: "round" | "inherit" | "bevel" | "miter";
        'stroke-miterlimit'?: string;
        'stroke-opacity'?: string | number;
        'stroke-width'?: string | number;
        surfaceScale?: string | number;
        systemLanguage?: string | number;
        tableValues?: string | number;
        targetX?: string | number;
        targetY?: string | number;
        'text-anchor'?: string;
        'text-decoration'?: string | number;
        textLength?: string | number;
        'text-rendering'?: string | number;
        u1?: string | number;
        u2?: string | number;
        'underline-position'?: string | number;
        'underline-thickness'?: string | number;
        unicode?: string | number;
        'unicode-bidi'?: string | number;
        'unicode-range'?: string | number;
        'units-per-em'?: string | number;
        'v-alphabetic'?: string | number;
        'vector-effect'?: string | number;
        version?: string;
        'vert-adv-y'?: string | number;
        'vert-origin-x'?: string | number;
        'vert-origin-y'?: string | number;
        'v-hanging'?: string | number;
        'v-ideographic'?: string | number;
        viewBox?: string;
        viewTarget?: string | number;
        'v-mathematical'?: string | number;
        widths?: string | number;
        'word-spacing'?: string | number;
        'writing-mode'?: string | number;
        x1?: string | number;
        x2?: string | number;
        xChannelSelector?: string;
        'x-height'?: string | number;
        'xlink:actuate'?: string;
        'xlink:arcrole'?: string;
        'xlink:href'?: string;
        'xlink:role'?: string;
        'xlink:show'?: string;
        'xlink:title'?: string;
        'xlink:type'?: string;
        'xml:base'?: string;
        'xml:lang'?: string;
        xmlns?: string;
        'xmlns:xlink'?: string;
        'xml:space'?: string;
        y1?: string | number;
        y2?: string | number;
        yChannelSelector?: string;
        z?: string | number;
        zoomAndPan?: string;
        'aria-activedescendant'?: string;
        'aria-atomic'?: import("svelte/elements").Booleanish;
        'aria-autocomplete'?: "none" | "inline" | "both" | "list";
        'aria-busy'?: import("svelte/elements").Booleanish;
        'aria-checked'?: boolean | "mixed" | "true" | "false";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-controls'?: string;
        'aria-current'?: "time" | "page" | import("svelte/elements").Booleanish | "step" | "location" | "date";
        'aria-describedby'?: string;
        'aria-details'?: string;
        'aria-disabled'?: import("svelte/elements").Booleanish;
        'aria-dropeffect'?: "copy" | "link" | "none" | "move" | "execute" | "popup";
        'aria-errormessage'?: string;
        'aria-expanded'?: import("svelte/elements").Booleanish;
        'aria-flowto'?: string;
        'aria-grabbed'?: import("svelte/elements").Booleanish;
        'aria-haspopup'?: "dialog" | "menu" | "grid" | "listbox" | import("svelte/elements").Booleanish | "tree";
        'aria-hidden'?: import("svelte/elements").Booleanish;
        'aria-invalid'?: import("svelte/elements").Booleanish | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: import("svelte/elements").Booleanish;
        'aria-multiline'?: import("svelte/elements").Booleanish;
        'aria-multiselectable'?: import("svelte/elements").Booleanish;
        'aria-orientation'?: "horizontal" | "vertical";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "mixed" | "true" | "false";
        'aria-readonly'?: import("svelte/elements").Booleanish;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
        'aria-required'?: import("svelte/elements").Booleanish;
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: import("svelte/elements").Booleanish;
        'aria-setsize'?: number;
        'aria-sort'?: "none" | "ascending" | "descending" | "other";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
        'on:submit'?: import("svelte/elements").EventHandler<Event & {
            readonly submitter: HTMLElement;
        }, HTMLElement>;
        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
            readonly formData: FormData;
        }, HTMLElement>;
        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export type LoaderProps = typeof __propDef.props;
export type LoaderEvents = typeof __propDef.events;
export type LoaderSlots = typeof __propDef.slots;
/**
 * The Loader component creates a loading icon. There are three different Loaders with the circle as the default.
 *
 * @see https://svelteui.org/core/loader
 * @example
 * ```tsx
 * <Loader color='green' size='lg' variant='bars' />
 * ```
 */
export default class Loader extends SvelteComponentTyped<LoaderProps, LoaderEvents, LoaderSlots> {
}
export {};
