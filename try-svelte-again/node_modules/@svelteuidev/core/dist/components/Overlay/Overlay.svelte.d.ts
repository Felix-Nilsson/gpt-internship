import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        class?: string;
        blur?: number;
        gradient?: string;
        center?: boolean;
        opacity?: import("@stitches/core/types/css").OnlyStringNumeric | import("@stitches/core/types/css").Globals | import("@stitches/core/types/theme").ScaleValue | import("@stitches/core/types/util").Index;
        color?: (import("@stitches/core/types/css").OnlyString | ("transparent" | "AliceBlue" | "AntiqueWhite" | "Aqua" | "Aquamarine" | "Azure" | "Beige" | "Bisque" | "Black" | "BlanchedAlmond" | "Blue" | "BlueViolet" | "Brown" | "BurlyWood" | "CadetBlue" | "Chartreuse" | "Chocolate" | "Coral" | "CornflowerBlue" | "Cornsilk" | "Crimson" | "Cyan" | "DarkBlue" | "DarkCyan" | "DarkGoldenRod" | "DarkGray" | "DarkGreen" | "DarkGrey" | "DarkKhaki" | "DarkMagenta" | "DarkOliveGreen" | "DarkOrange" | "DarkOrchid" | "DarkRed" | "DarkSalmon" | "DarkSeaGreen" | "DarkSlateBlue" | "DarkSlateGray" | "DarkSlateGrey" | "DarkTurquoise" | "DarkViolet" | "DeepPink" | "DeepSkyBlue" | "DimGray" | "DimGrey" | "DodgerBlue" | "FireBrick" | "FloralWhite" | "ForestGreen" | "Fuchsia" | "Gainsboro" | "GhostWhite" | "Gold" | "GoldenRod" | "Gray" | "Green" | "GreenYellow" | "Grey" | "HoneyDew" | "HotPink" | "IndianRed" | "Indigo" | "Ivory" | "Khaki" | "Lavender" | "LavenderBlush" | "LawnGreen" | "LemonChiffon" | "LightBlue" | "LightCoral" | "LightCyan" | "LightGoldenRodYellow" | "LightGray" | "LightGreen" | "LightGrey" | "LightPink" | "LightSalmon" | "LightSeaGreen" | "LightSkyBlue" | "LightSlateGray" | "LightSlateGrey" | "LightSteelBlue" | "LightYellow" | "Lime" | "LimeGreen" | "Linen" | "Magenta" | "Maroon" | "MediumAquaMarine" | "MediumBlue" | "MediumOrchid" | "MediumPurple" | "MediumSeaGreen" | "MediumSlateBlue" | "MediumSpringGreen" | "MediumTurquoise" | "MediumVioletRed" | "MidnightBlue" | "MintCream" | "MistyRose" | "Moccasin" | "NavajoWhite" | "Navy" | "OldLace" | "Olive" | "OliveDrab" | "Orange" | "OrangeRed" | "Orchid" | "PaleGoldenRod" | "PaleGreen" | "PaleTurquoise" | "PaleVioletRed" | "PapayaWhip" | "PeachPuff" | "Peru" | "Pink" | "Plum" | "PowderBlue" | "Purple" | "RebeccaPurple" | "Red" | "RosyBrown" | "RoyalBlue" | "SaddleBrown" | "Salmon" | "SandyBrown" | "SeaGreen" | "SeaShell" | "Sienna" | "Silver" | "SkyBlue" | "SlateBlue" | "SlateGray" | "SlateGrey" | "Snow" | "SpringGreen" | "SteelBlue" | "Tan" | "Teal" | "Thistle" | "Tomato" | "Turquoise" | "Violet" | "Wheat" | "White" | "WhiteSmoke" | "Yellow" | "YellowGreen") | ("ActiveText" | "ButtonFace" | "ButtonText" | "ButtonBorder" | "Canvas" | "CanvasText" | "Field" | "FieldText" | "GrayText" | "Highlight" | "HighlightText" | "LinkText" | "Mark" | "MarkText" | "VisitedText") | "CurrentColor" | "hsl(" | "lab(" | "rgb(") | import("@stitches/core/types/css").Globals | import("@stitches/core/types/theme").ScaleValue | import("@stitches/core/types/util").Index | "$dark50" | "$dark100" | "$dark200" | "$dark300" | "$dark400" | "$dark500" | "$dark600" | "$dark700" | "$dark800" | "$dark900" | "$gray50" | "$gray100" | "$gray200" | "$gray300" | "$gray400" | "$gray500" | "$gray600" | "$gray700" | "$gray800" | "$gray900" | "$red50" | "$red100" | "$red200" | "$red300" | "$red400" | "$red500" | "$red600" | "$red700" | "$red800" | "$red900" | "$pink50" | "$pink100" | "$pink200" | "$pink300" | "$pink400" | "$pink500" | "$pink600" | "$pink700" | "$pink800" | "$pink900" | "$grape50" | "$grape100" | "$grape200" | "$grape300" | "$grape400" | "$grape500" | "$grape600" | "$grape700" | "$grape800" | "$grape900" | "$violet50" | "$violet100" | "$violet200" | "$violet300" | "$violet400" | "$violet500" | "$violet600" | "$violet700" | "$violet800" | "$violet900" | "$indigo50" | "$indigo100" | "$indigo200" | "$indigo300" | "$indigo400" | "$indigo500" | "$indigo600" | "$indigo700" | "$indigo800" | "$indigo900" | "$blue50" | "$blue100" | "$blue200" | "$blue300" | "$blue400" | "$blue500" | "$blue600" | "$blue700" | "$blue800" | "$blue900" | "$cyan50" | "$cyan100" | "$cyan200" | "$cyan300" | "$cyan400" | "$cyan500" | "$cyan600" | "$cyan700" | "$cyan800" | "$cyan900" | "$teal50" | "$teal100" | "$teal200" | "$teal300" | "$teal400" | "$teal500" | "$teal600" | "$teal700" | "$teal800" | "$teal900" | "$green50" | "$green100" | "$green200" | "$green300" | "$green400" | "$green500" | "$green600" | "$green700" | "$green800" | "$green900" | "$lime50" | "$lime100" | "$lime200" | "$lime300" | "$lime400" | "$lime500" | "$lime600" | "$lime700" | "$lime800" | "$lime900" | "$yellow50" | "$yellow100" | "$yellow200" | "$yellow300" | "$yellow400" | "$yellow500" | "$yellow600" | "$yellow700" | "$yellow800" | "$yellow900" | "$orange50" | "$orange100" | "$orange200" | "$orange300" | "$orange400" | "$orange500" | "$orange600" | "$orange700" | "$orange800" | "$orange900" | "$primary" | "$white" | "$black";
        zIndex?: import("@stitches/core/types/css").Globals | import("@stitches/core/types/theme").ScaleValue | import("@stitches/core/types/util").Index | "$1" | "$2" | "$3" | "$4" | "$5" | "$10" | import("@stitches/core/types/css").Property.ZIndex | "$max";
        radius?: import("../..").SvelteUINumberSize;
        className?: string;
        override?: import("../..").CSS;
        element?: HTMLElement;
        use?: import("../../internal/utils/forwarding/forward-actions").ActionArray;
        m?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        my?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        mx?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        mt?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        mb?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        ml?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        mr?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        p?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        py?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        px?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        pt?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        pb?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        pl?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        pr?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        contextmenu?: string;
        slot?: string;
        style?: string;
        title?: string;
        translate?: "" | "yes" | "no";
        hidden?: boolean;
        prefix?: string;
        radiogroup?: string;
        id?: string;
        lang?: string;
        role?: import("svelte/elements").AriaRole;
        tabindex?: number;
        'aria-activedescendant'?: string;
        'aria-atomic'?: import("svelte/elements").Booleanish;
        'aria-autocomplete'?: "none" | "inline" | "both" | "list";
        'aria-busy'?: import("svelte/elements").Booleanish;
        'aria-checked'?: boolean | "mixed" | "true" | "false";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-controls'?: string;
        'aria-current'?: "time" | "page" | import("svelte/elements").Booleanish | "step" | "location" | "date";
        'aria-describedby'?: string;
        'aria-details'?: string;
        'aria-disabled'?: import("svelte/elements").Booleanish;
        'aria-dropeffect'?: "copy" | "link" | "none" | "move" | "execute" | "popup";
        'aria-errormessage'?: string;
        'aria-expanded'?: import("svelte/elements").Booleanish;
        'aria-flowto'?: string;
        'aria-grabbed'?: import("svelte/elements").Booleanish;
        'aria-haspopup'?: "dialog" | "menu" | "grid" | "listbox" | import("svelte/elements").Booleanish | "tree";
        'aria-hidden'?: import("svelte/elements").Booleanish;
        'aria-invalid'?: import("svelte/elements").Booleanish | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: import("svelte/elements").Booleanish;
        'aria-multiline'?: import("svelte/elements").Booleanish;
        'aria-multiselectable'?: import("svelte/elements").Booleanish;
        'aria-orientation'?: "horizontal" | "vertical";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "mixed" | "true" | "false";
        'aria-readonly'?: import("svelte/elements").Booleanish;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
        'aria-required'?: import("svelte/elements").Booleanish;
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: import("svelte/elements").Booleanish;
        'aria-setsize'?: number;
        'aria-sort'?: "none" | "ascending" | "descending" | "other";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
        'on:submit'?: import("svelte/elements").EventHandler<Event & {
            readonly submitter: HTMLElement;
        }, HTMLElement>;
        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
            readonly formData: FormData;
        }, HTMLElement>;
        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
        placeholder?: string;
        accesskey?: string;
        autofocus?: boolean;
        contenteditable?: "inherit" | import("svelte/elements").Booleanish;
        dir?: string;
        draggable?: import("svelte/elements").Booleanish;
        enterkeyhint?: "search" | "enter" | "done" | "go" | "next" | "previous" | "send";
        part?: string;
        spellcheck?: import("svelte/elements").Booleanish;
        inert?: boolean;
        about?: string;
        datatype?: string;
        inlist?: any;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autocapitalize?: string;
        autocorrect?: string;
        autosave?: string;
        itemprop?: string;
        itemscope?: boolean;
        itemtype?: string;
        itemid?: string;
        itemref?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        inputmode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
        is?: string;
        'bind:innerHTML'?: string;
        'bind:textContent'?: string;
        'bind:innerText'?: string;
        'bind:contentRect'?: DOMRectReadOnly;
        'bind:contentBoxSize'?: {
            blockSize: number;
            inlineSize: number;
        }[];
        'bind:borderBoxSize'?: {
            blockSize: number;
            inlineSize: number;
        }[];
        'bind:devicePixelContentBoxSize'?: {
            blockSize: number;
            inlineSize: number;
        }[];
        'data-sveltekit-keepfocus'?: true | "" | "off";
        'data-sveltekit-noscroll'?: true | "" | "off";
        'data-sveltekit-preload-code'?: true | "" | "off" | "eager" | "viewport" | "hover" | "tap";
        'data-sveltekit-preload-data'?: true | "" | "off" | "hover" | "tap";
        'data-sveltekit-reload'?: true | "" | "off";
        'data-sveltekit-replacestate'?: true | "" | "off";
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export type OverlayProps = typeof __propDef.props;
export type OverlayEvents = typeof __propDef.events;
export type OverlaySlots = typeof __propDef.slots;
/**
 * Overlays given element with div element with any color and opacity
 *
 * @see https://svelteui.org/core/overlay
 * @example
 *    ```svelte
 * <Box sx={{ height: 100, position: 'relative' }}>
 *       	<Overlay opacity={0.6} color="#000" blur={2} />
 *        Overlay with a blur
 *    </Box>
 * <Box sx={{ height: 100, position: 'relative' }}>
 *       	<Overlay gradient={`linear-gradient(105deg, black 20%, #312f2f 50%, $gray400 100%)`} />
 *        Overlay with a gradient
 *    </Box>
 * <Overlay center>
 * 	This content sits on top of the overlay
 * </Overlay>
 *    ```
 */
export default class Overlay extends SvelteComponentTyped<OverlayProps, OverlayEvents, OverlaySlots> {
}
export {};
