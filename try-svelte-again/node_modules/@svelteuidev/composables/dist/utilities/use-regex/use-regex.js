const PATTERN_BANK = [{ name: 'getAllOf', pattern: '(?:^|W)%svelteui%(?:$|W)' }];
const useRegexOptions = {
    test: false,
    testType: 'test',
    testString: ''
};
/**
 * The `useRegexFactory` function is used to add your own custom regex patterns to the `useRegex` function.
 *
 * @param extensions - an array of pattern bank options that allows for you to extend the default bank.
 * @returns a useRegex function
 */
export function useRegexFactory(extensions = []) {
    // "settings of the constructor"
    const patternBank = [...PATTERN_BANK, ...extensions];
    /**
     * The `useRegex` function is used to get common regex patterns, or test against those patterns directly in the function.
     *
     * The list of patterns can be extended with the useRegexFactory function.
     *
     * @param name - name of the desired regex pattern to use
     * @param matcher - the "item" to match the regex against
     * @param options optional options object that tells the function how to test your regex if you want to test it
     * @returns a regex pattern, or a tested regex string
     */
    function useRegex(name, matcher, options = useRegexOptions) {
        let pattern;
        const { test, testType, testString } = { ...useRegexOptions, ...options };
        /** get the pattern from the object at name */
        patternBank.forEach((_pattern) => {
            if (name === _pattern.name)
                pattern = _pattern.pattern;
        });
        // set pattern equal to the pattern retrieved with the matcher
        pattern = pattern.replace(/%svelteui%/g, matcher);
        const regex = new RegExp(pattern, testType === 'match-all' ? 'g' : null);
        if (test) {
            let value;
            switch (testType) {
                case 'test':
                    value = regex.test(testString);
                    break;
                case 'search':
                    value = testString.search(regex);
                    break;
                case 'match':
                    value = testString.match(regex);
                    break;
                case 'match-all':
                    value = testString.matchAll(regex);
                    break;
                default:
                    break;
            }
            return value;
        }
        return regex;
    }
    return useRegex;
}
