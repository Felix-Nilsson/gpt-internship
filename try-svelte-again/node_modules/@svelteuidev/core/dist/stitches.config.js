import { createStitches, defaultThemeMap } from '@stitches/core';
import { colors } from './styles';
export const { css, globalCss, keyframes, getCssText, theme, createTheme, config, reset } = createStitches({
    prefix: 'svelteui',
    theme: {
        colors,
        space: {
            0: '0rem',
            xs: 10,
            sm: 12,
            md: 16,
            lg: 20,
            xl: 24,
            xsPX: '10px',
            smPX: '12px',
            mdPX: '16px',
            lgPX: '20px',
            xlPX: '24px',
            1: '0.125rem',
            2: '0.25rem',
            3: '0.375rem',
            4: '0.5rem',
            5: '0.625rem',
            6: '0.75rem',
            7: '0.875rem',
            8: '1rem',
            9: '1.25rem',
            10: '1.5rem',
            11: '1.75rem',
            12: '2rem',
            13: '2.25rem',
            14: '2.5rem',
            15: '2.75rem',
            16: '3rem',
            17: '3.5rem',
            18: '4rem',
            20: '5rem',
            24: '6rem',
            28: '7rem',
            32: '8rem',
            36: '9rem',
            40: '10rem',
            44: '11rem',
            48: '12rem',
            52: '13rem',
            56: '14rem',
            60: '15rem',
            64: '16rem',
            72: '18rem',
            80: '20rem',
            96: '24rem'
        },
        fontSizes: {
            xs: '12px',
            sm: '14px',
            md: '16px',
            lg: '18px',
            xl: '20px'
        },
        fonts: {
            standard: '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji',
            mono: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, Liberation Mono, Courier New, monospace',
            fallback: 'Segoe UI, system-ui, sans-serif'
        },
        fontWeights: {
            thin: 100,
            extralight: 200,
            light: 300,
            normal: 400,
            medium: 500,
            semibold: 600,
            bold: 700,
            extrabold: 800
        },
        lineHeights: {
            xs: 1,
            sm: 1.25,
            md: 1.5,
            lg: 1.625,
            xl: 1.75
        },
        letterSpacings: {
            tighter: '-0.05em',
            tight: '-0.025em',
            normal: '0',
            wide: '0.025em',
            wider: '0.05em',
            widest: '0.1em'
        },
        sizes: {},
        radii: {
            xs: '2px',
            sm: '4px',
            md: '8px',
            lg: '16px',
            xl: '32px',
            squared: '33%',
            rounded: '50%',
            pill: '9999px'
        },
        shadows: {
            xs: '0 1px 3px rgba(0, 0, 0, 0.05), 0 1px 2px rgba(0, 0, 0, 0.1)',
            sm: '0 1px 3px rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0px 10px 15px -5px, rgba(0, 0, 0, 0.04) 0px 7px 7px -5px',
            md: '0 1px 3px rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0px 20px 25px -5px, rgba(0, 0, 0, 0.04) 0px 10px 10px -5px',
            lg: '0 1px 3px rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0px 28px 23px -7px, rgba(0, 0, 0, 0.04) 0px 12px 12px -7px',
            xl: '0 1px 3px rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0px 36px 28px -7px, rgba(0, 0, 0, 0.04) 0px 17px 17px -7px'
        },
        zIndices: {
            1: '100',
            2: '200',
            3: '300',
            4: '400',
            5: '500',
            10: '1000',
            max: '9999'
        },
        borderWidths: {
            light: '1px',
            normal: '2px',
            bold: '3px',
            extrabold: '4px',
            black: '5px',
            xs: '1px',
            sm: '2px',
            md: '3px',
            lg: '4px',
            xl: '5px'
        },
        breakpoints: {
            xs: 576,
            sm: 768,
            md: 992,
            lg: 1200,
            xl: 1400
        },
        borderStyles: {},
        transitions: {}
    },
    media: {
        xs: '(min-width: 576px)',
        sm: '(min-width: 768px)',
        md: '(min-width: 992px)',
        lg: '(min-width: 1200px)',
        xl: '(min-width: 1400px)'
    },
    utils: {
        focusRing: (value) => ({
            WebkitTapHighlightColor: 'transparent',
            '&:focus': {
                outlineOffset: 2,
                outline: value === 'always' || value === 'auto' ? '2px solid $primary' : 'none'
            },
            '&:focus:not(:focus-visible)': {
                outline: value === 'auto' || value === 'never' ? 'none' : undefined
            }
        }),
        /** padding top */
        p: (value) => ({
            padding: value
        }),
        pt: (value) => ({
            paddingTop: value
        }),
        pr: (value) => ({
            paddingRight: value
        }),
        pb: (value) => ({
            paddingBottom: value
        }),
        pl: (value) => ({
            paddingLeft: value
        }),
        px: (value) => ({
            paddingLeft: value,
            paddingRight: value
        }),
        py: (value) => ({
            paddingTop: value,
            paddingBottom: value
        }),
        /** margin */
        m: (value) => ({
            margin: value
        }),
        /** margin-top */
        mt: (value) => ({
            marginTop: value
        }),
        mr: (value) => ({
            marginRight: value
        }),
        mb: (value) => ({
            marginBottom: value
        }),
        ml: (value) => ({
            marginLeft: value
        }),
        mx: (value) => ({
            marginLeft: value,
            marginRight: value
        }),
        my: (value) => ({
            marginTop: value,
            marginBottom: value
        }),
        ta: (value) => ({
            textAlign: value
        }),
        tt: (value) => ({
            textTransform: value
        }),
        to: (value) => ({
            textOverflow: value
        }),
        d: (value) => ({ display: value }),
        dflex: (value) => ({
            display: 'flex',
            alignItems: value,
            justifyContent: value
        }),
        fd: (value) => ({
            flexDirection: value
        }),
        fw: (value) => ({ flexWrap: value }),
        ai: (value) => ({
            alignItems: value
        }),
        ac: (value) => ({
            alignContent: value
        }),
        jc: (value) => ({
            justifyContent: value
        }),
        as: (value) => ({
            alignSelf: value
        }),
        fg: (value) => ({ flexGrow: value }),
        fs: (value) => ({
            fontSize: value
        }),
        fb: (value) => ({
            flexBasis: value
        }),
        bc: (value) => ({
            backgroundColor: value
        }),
        bf: (value) => ({
            backdropFilter: value
        }),
        bg: (value) => ({
            background: value
        }),
        bgBlur: (value) => ({
            bf: 'saturate(180%) blur(10px)',
            bg: value
        }),
        bgColor: (value) => ({
            backgroundColor: value
        }),
        backgroundClip: (value) => ({
            WebkitBackgroundClip: value,
            backgroundClip: value
        }),
        bgClip: (value) => ({
            WebkitBackgroundClip: value,
            backgroundClip: value
        }),
        br: (value) => ({
            borderRadius: value
        }),
        bw: (value) => ({
            borderWidth: value
        }),
        btrr: (value) => ({
            borderTopRightRadius: value
        }),
        bbrr: (value) => ({
            borderBottomRightRadius: value
        }),
        bblr: (value) => ({
            borderBottomLeftRadius: value
        }),
        btlr: (value) => ({
            borderTopLeftRadius: value
        }),
        bs: (value) => ({
            boxShadow: value
        }),
        normalShadow: (value) => ({
            boxShadow: `0 4px 14px 0 $${value}`
        }),
        lh: (value) => ({
            lineHeight: value
        }),
        ov: (value) => ({ overflow: value }),
        ox: (value) => ({
            overflowX: value
        }),
        oy: (value) => ({
            overflowY: value
        }),
        pe: (value) => ({
            pointerEvents: value
        }),
        events: (value) => ({
            pointerEvents: value
        }),
        us: (value) => ({
            WebkitUserSelect: value,
            userSelect: value
        }),
        userSelect: (value) => ({
            WebkitUserSelect: value,
            userSelect: value
        }),
        w: (value) => ({ width: value }),
        h: (value) => ({
            height: value
        }),
        minW: (value) => ({
            minWidth: value
        }),
        minH: (value) => ({
            minWidth: value
        }),
        mw: (value) => ({
            maxWidth: value
        }),
        maxW: (value) => ({
            maxWidth: value
        }),
        mh: (value) => ({
            maxHeight: value
        }),
        maxH: (value) => ({
            maxHeight: value
        }),
        size: (value) => ({
            width: value,
            height: value
        }),
        minSize: (value) => ({
            minWidth: value,
            minHeight: value,
            width: value,
            height: value
        }),
        sizeMin: (value) => ({
            minWidth: value,
            minHeight: value,
            width: value,
            height: value
        }),
        maxSize: (value) => ({
            maxWidth: value,
            maxHeight: value
        }),
        sizeMax: (value) => ({
            maxWidth: value,
            maxHeight: value
        }),
        appearance: (value) => ({
            WebkitAppearance: value,
            appearance: value
        }),
        scale: (value) => ({
            transform: `scale(${value})`
        }),
        linearGradient: (value) => ({
            backgroundImage: `linear-gradient(${value})`
        }),
        tdl: (value) => ({
            textDecorationLine: value
        }),
        // Text gradient effect
        textGradient: (value) => ({
            backgroundImage: `linear-gradient(${value})`,
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent'
        })
    },
    themeMap: {
        ...defaultThemeMap,
        width: 'space',
        height: 'space',
        minWidth: 'space',
        maxWidth: 'space',
        minHeight: 'space',
        maxHeight: 'space',
        flexBasis: 'space',
        gridTemplateColumns: 'space',
        gridTemplateRows: 'space',
        blockSize: 'space',
        minBlockSize: 'space',
        maxBlockSize: 'space',
        inlineSize: 'space',
        minInlineSize: 'space',
        maxInlineSize: 'space',
        borderWidth: 'borderWeights'
    }
});
/** Function for dark theme */
const dark = createTheme('dark-theme', {
    colors,
    shadows: {
        xs: '-4px 0 15px rgb(0 0 0 / 50%)',
        sm: '0 5px 20px -5px rgba(20, 20, 20, 0.1)',
        md: '0 8px 30px rgba(20, 20, 20, 0.15)',
        lg: '0 30px 60px rgba(20, 20, 20, 0.15)',
        xl: '0 40px 80px rgba(20, 20, 20, 0.25)'
    }
});
/** Global styles for SvelteUI */
const SvelteUIGlobalCSS = globalCss({
    a: {
        focusRing: 'auto'
    },
    body: {
        [`${dark.selector} &`]: {
            backgroundColor: '$dark700',
            color: '$dark50'
        },
        backgroundColor: '$white',
        color: '$black'
    }
});
/** Normalize css function */
const NormalizeCSS = globalCss({
    html: {
        fontFamily: 'sans-serif',
        lineHeight: '1.15',
        textSizeAdjust: '100%',
        margin: 0
    },
    body: {
        margin: 0
    },
    'article, aside, footer, header, nav, section, figcaption, figure, main': {
        display: 'block'
    },
    h1: {
        fontSize: '2em',
        margin: 0
    },
    hr: {
        boxSizing: 'content-box',
        height: 0,
        overflow: 'visible'
    },
    pre: {
        fontFamily: 'monospace, monospace',
        fontSize: '1em'
    },
    a: {
        background: 'transparent',
        textDecorationSkip: 'objects'
    },
    'a:active, a:hover': {
        outlineWidth: 0
    },
    'abbr[title]': {
        borderBottom: 'none',
        textDecoration: 'underline'
    },
    'b, strong': {
        fontWeight: 'bolder'
    },
    'code, kbp, samp': {
        fontFamily: 'monospace, monospace',
        fontSize: '1em'
    },
    dfn: {
        fontStyle: 'italic'
    },
    mark: {
        backgroundColor: '#ff0',
        color: '#000'
    },
    small: {
        fontSize: '80%'
    },
    'sub, sup': {
        fontSize: '75%',
        lineHeight: 0,
        position: 'relative',
        verticalAlign: 'baseline'
    },
    sup: {
        top: '-0.5em'
    },
    sub: {
        bottom: '-0.25em'
    },
    'audio, video': {
        display: 'inline-block'
    },
    'audio:not([controls])': {
        display: 'none',
        height: 0
    },
    img: {
        borderStyle: 'none',
        verticalAlign: 'middle'
    },
    'svg:not(:root)': {
        overflow: 'hidden'
    },
    'button, input, optgroup, select, textarea': {
        fontFamily: 'sans-serif',
        fontSize: '100%',
        lineHeight: '1.15',
        margin: 0
    },
    'button, input': {
        overflow: 'visible'
    },
    'button, select': {
        textTransform: 'none'
    },
    'button, [type=reset], [type=submit]': {
        WebkitAppearance: 'button'
    },
    'button::-moz-focus-inner, [type=button]::-moz-focus-inner, [type=reset]::-moz-focus-inner, [type=submit]::-moz-focus-inner': {
        borderStyle: 'none',
        padding: 0
    },
    'button:-moz-focusring, [type=button]:-moz-focusring, [type=reset]:-moz-focusring, [type=submit]:-moz-focusring': {
        outline: '1px dotted ButtonText'
    },
    legend: {
        boxSizing: 'border-box',
        color: 'inherit',
        display: 'table',
        maxWidth: '100%',
        padding: 0,
        whiteSpace: 'normal'
    },
    progress: {
        display: 'inline-block',
        verticalAlign: 'baseline'
    },
    textarea: {
        overflow: 'auto'
    },
    '[type=checkbox], [type=radio]': {
        boxSizing: 'border-box',
        padding: 0
    },
    '[type=number]::-webkit-inner-spin-button, [type=number]::-webkit-outer-spin-button': {
        height: 'auto'
    },
    '[type=search]': {
        appearance: 'textfield',
        outlineOffset: '-2px'
    },
    '[type=search]::-webkit-search-cancel-button, [type=search]::-webkit-search-decoration': {
        appearance: 'none'
    },
    '::-webkit-file-upload-button': {
        appearance: 'button',
        font: 'inherit'
    },
    'details, menu': {
        display: 'block'
    },
    summary: {
        display: 'list-item'
    },
    canvas: {
        display: 'inline-block'
    },
    template: {
        display: 'none'
    },
    '[hidden]': {
        display: 'none'
    }
});
export { SvelteUIGlobalCSS, NormalizeCSS, dark };
