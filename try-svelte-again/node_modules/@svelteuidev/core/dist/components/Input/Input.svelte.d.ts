import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        class?: string;
        invalid?: boolean;
        multiline?: boolean;
        autocomplete?: string;
        icon?: HTMLOrSVGElement | typeof import("svelte").SvelteComponent;
        iconWidth?: number;
        iconProps?: {
            size: number;
            color: string;
        };
        showRightSection?: boolean;
        rightSectionWidth?: number;
        rightSectionProps?: Record<string, unknown>;
        wrapperProps?: Record<string, unknown>;
        placeholder?: string;
        id?: string;
        required?: boolean;
        radius?: import("../..").SvelteUINumberSize;
        variant?: import("./Input").InputVariant;
        disabled?: boolean;
        size?: import("../..").SvelteUISize;
        resize?: import("@stitches/core/types/css").Globals | import("@stitches/core/types/theme").ScaleValue | import("@stitches/core/types/util").Index | import("@stitches/core/types/css").Property.Resize;
        root?: typeof import("svelte").SvelteComponent | keyof HTMLElementTagNameMap;
        value?: any;
        className?: string;
        override?: import("../..").CSS;
        element?: import("./Input").InputElementType;
        use?: import("../../internal/utils/forwarding/forward-actions").ActionArray;
        m?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        my?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        mx?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        mt?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        mb?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        ml?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        mr?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        p?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        py?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        px?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        pt?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        pb?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        pl?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        pr?: import("../../styles/theme/types/SvelteUIStyleSystem").SvelteUIStyleSystemValue;
        contextmenu?: string;
        form?: string;
        slot?: string;
        style?: string;
        title?: string;
        name?: string;
        capture?: boolean | "user" | "environment";
        max?: string | number;
        color?: string;
        height?: string | number;
        translate?: "" | "yes" | "no";
        width?: string | number;
        hidden?: boolean;
        prefix?: string;
        list?: string;
        radiogroup?: string;
        step?: string | number;
        multiple?: boolean;
        lang?: string;
        min?: string | number;
        type?: import("svelte/elements").HTMLInputTypeAttribute;
        role?: import("svelte/elements").AriaRole;
        tabindex?: number;
        crossorigin?: string;
        'aria-activedescendant'?: string;
        'aria-atomic'?: import("svelte/elements").Booleanish;
        'aria-autocomplete'?: "none" | "inline" | "both" | "list";
        'aria-busy'?: import("svelte/elements").Booleanish;
        'aria-checked'?: boolean | "mixed" | "true" | "false";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-controls'?: string;
        'aria-current'?: "time" | "page" | import("svelte/elements").Booleanish | "step" | "location" | "date";
        'aria-describedby'?: string;
        'aria-details'?: string;
        'aria-disabled'?: import("svelte/elements").Booleanish;
        'aria-dropeffect'?: "copy" | "link" | "none" | "move" | "execute" | "popup";
        'aria-errormessage'?: string;
        'aria-expanded'?: import("svelte/elements").Booleanish;
        'aria-flowto'?: string;
        'aria-grabbed'?: import("svelte/elements").Booleanish;
        'aria-haspopup'?: "dialog" | "menu" | "grid" | "listbox" | import("svelte/elements").Booleanish | "tree";
        'aria-hidden'?: import("svelte/elements").Booleanish;
        'aria-invalid'?: import("svelte/elements").Booleanish | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: import("svelte/elements").Booleanish;
        'aria-multiline'?: import("svelte/elements").Booleanish;
        'aria-multiselectable'?: import("svelte/elements").Booleanish;
        'aria-orientation'?: "horizontal" | "vertical";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "mixed" | "true" | "false";
        'aria-readonly'?: import("svelte/elements").Booleanish;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
        'aria-required'?: import("svelte/elements").Booleanish;
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: import("svelte/elements").Booleanish;
        'aria-setsize'?: number;
        'aria-sort'?: "none" | "ascending" | "descending" | "other";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement>;
        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement>;
        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement>;
        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement>;
        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement>;
        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement>;
        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement>;
        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement>;
        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement>;
        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement>;
        'on:change'?: import("svelte/elements").ChangeEventHandler<HTMLInputElement> & import("svelte/elements").ChangeEventHandler<HTMLSelectElement> & import("svelte/elements").ChangeEventHandler<HTMLTextAreaElement>;
        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement> & import("svelte/elements").EventHandler<InputEvent, HTMLSelectElement> & import("svelte/elements").EventHandler<InputEvent, HTMLTextAreaElement>;
        'on:input'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement>;
        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement>;
        'on:submit'?: import("svelte/elements").EventHandler<Event & {
            readonly submitter: HTMLElement;
        }, HTMLInputElement> & import("svelte/elements").EventHandler<Event & {
            readonly submitter: HTMLElement;
        }, HTMLSelectElement> & import("svelte/elements").EventHandler<Event & {
            readonly submitter: HTMLElement;
        }, HTMLTextAreaElement>;
        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
            readonly formData: FormData;
        }, HTMLInputElement> & import("svelte/elements").EventHandler<Event & {
            readonly formData: FormData;
        }, HTMLSelectElement> & import("svelte/elements").EventHandler<Event & {
            readonly formData: FormData;
        }, HTMLTextAreaElement>;
        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement>;
        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement>;
        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement>;
        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement>;
        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement>;
        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement>;
        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement>;
        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement>;
        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement>;
        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement> & import("svelte/elements").WheelEventHandler<HTMLSelectElement> & import("svelte/elements").WheelEventHandler<HTMLTextAreaElement>;
        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement>;
        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement>;
        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement>;
        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement>;
        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement>;
        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement>;
        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement>;
        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement>;
        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement>;
        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement>;
        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement>;
        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement>;
        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement>;
        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
        accept?: string;
        alt?: string;
        checked?: boolean;
        formaction?: string;
        formenctype?: string;
        formmethod?: string;
        formnovalidate?: boolean;
        formtarget?: string;
        maxlength?: number;
        minlength?: number;
        pattern?: string;
        readonly?: boolean;
        src?: string;
        'bind:checked'?: boolean;
        'bind:value'?: any;
        'bind:group'?: any;
        'bind:files'?: FileList;
        'bind:indeterminate'?: boolean;
        accesskey?: string;
        autofocus?: boolean;
        contenteditable?: "inherit" | import("svelte/elements").Booleanish;
        dir?: string;
        draggable?: import("svelte/elements").Booleanish;
        enterkeyhint?: "search" | "enter" | "done" | "go" | "next" | "previous" | "send";
        part?: string;
        spellcheck?: import("svelte/elements").Booleanish;
        inert?: boolean;
        about?: string;
        datatype?: string;
        inlist?: any;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autocapitalize?: string;
        autocorrect?: string;
        autosave?: string;
        itemprop?: string;
        itemscope?: boolean;
        itemtype?: string;
        itemid?: string;
        itemref?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        inputmode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
        is?: string;
        'bind:innerHTML'?: string;
        'bind:textContent'?: string;
        'bind:innerText'?: string;
        'bind:contentRect'?: DOMRectReadOnly;
        'bind:contentBoxSize'?: {
            blockSize: number;
            inlineSize: number;
        }[];
        'bind:borderBoxSize'?: {
            blockSize: number;
            inlineSize: number;
        }[];
        'bind:devicePixelContentBoxSize'?: {
            blockSize: number;
            inlineSize: number;
        }[];
        'data-sveltekit-keepfocus'?: true | "" | "off";
        'data-sveltekit-noscroll'?: true | "" | "off";
        'data-sveltekit-preload-code'?: true | "" | "off" | "eager" | "viewport" | "hover" | "tap";
        'data-sveltekit-preload-data'?: true | "" | "off" | "hover" | "tap";
        'data-sveltekit-reload'?: true | "" | "off";
        'data-sveltekit-replacestate'?: true | "" | "off";
        cols?: number;
        dirname?: string;
        rows?: number;
        wrap?: string;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
        rightSection: {};
    };
};
export type InputProps = typeof __propDef.props;
export type InputEvents = typeof __propDef.events;
export type InputSlots = typeof __propDef.slots;
/**
 * **DISCLAIMER: In most cases, you should not use Input component in your application. Input component is a base for other inputs and was not designed to be used directly.**
 *
 * Base component to create custom inputs
 *
 * @see https://svelteui.org/core/input
 * @example
 *    ```svelte
 *    <Input
 *      icon={Twitter}
 *      placeholder="Your twitter"
 *      rightSectionWidth={70}
 *      override={{ '& .rightSection': { pointerEvents: 'none' } }}
 *    >
 * 	<Badge slot='rightSection' color="blue" variant="filled">
 * 		new
 * 	</Badge>
 * <Input />
 *    ```
 */
export default class Input extends SvelteComponentTyped<InputProps, InputEvents, InputSlots> {
}
export {};
